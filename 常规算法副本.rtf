{\rtf1\ansi\ansicpg936\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;\red183\green177\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh9620\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0  
\f1\fs96 \cf2 \'b6\'fe\'b7\'d6\'b2\'e9\'d5\'d2
\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs36 \cf0 int BinSearch( int array[] ,int low ,int high, int target)\
\{\
         //array \'ca\'fd\'d7\'e9 low \'cf\'c2\'cf\'de high \'c9\'cf\'cf\'de \'b2\'e9\'d5\'d2\'b5\'c4\'c4\'bf\'b1\'ea\'d6\'b5\
\
while(high>=low)\
\{\
       int mid = (high+low)*0.5;\
       if(array[mid]>target)\
       high=mid-1;\
else if(array[mid]<target)\
       low=mid+1;\
else return mid;\
   \}\
return -1;\
\}\
\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b5\'c4\'b6\'c8\'b5\'c4\'bc\'c6\'cb\'e3:\
\'d7\'dc\'b9\'b2n\'b8\'f6\'d4\'aa\'cb\'d8:\'bd\'a5\'bd\'a5\'c8\'a1\'cf\'c2\'c8\'a5:n,n/2,n/4,.....n/2^k.\
k\'ce\'aa\'d1\'ad\'bb\'b7\'b5\'c4\'b4\'ce\'ca\'fd,n/2^k=1;o()=o(logn);\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc
\cf0 \'d6\'b1\'bd\'d3\'b2\'e5\'c8\'eb\'c5\'c5\'d0\'f2\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 void insertSort(int array[])\
\{\
      int len=array.length;\
    for(int i=1;i<len;i++)\
   \{\
         for(int j=i-1;j>0&&array[j]>array[j+1],j- -)\
        swap(array[j],array[j+1]);\
   \}\
\}\
\'b8\'b4\'d4\'d3\'b6\'c8o(n^2)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc
\cf0 \'c3\'b0\'c5\'dd\'c5\'c5\'d0\'f2\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 void bubbleSort(int array[])\
\{\
      int len=array.length;\
      int i,j,flag=1;\
      for(int i=0;i<len&&flag==1;i++)\
      \{\
           flag=0;\
           for(int j=len-1; j>i  ;   j- -)\
           \{\
                    if(array[j]<array[j-1])\
                     \{\
                           flag=1;\
                           swap(array[j],array[j-1])  \
                     \}\
            \}\
       \}\
\}\
\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8o(n^2)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc
\cf0 \'bf\'ec\'cb\'d9\'c5\'c5\'d0\'f2\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 void Qsort(int array[],int low,int high )\
\{\
\
    int first=low;\
    int high =last;\
    int key=array[first];\
    while(high>low)\
    \{\
            while(high>low&&array[last]>key)\
            \{\
                     last- -;\
             \}\
             array[first]=array[last];\
             while(high>low&&array[first]<key)\
              \{\
                     first++;\
              \}\
              array[last]=array[first]                \
     \}\
   array[first]=key;\
   Qsort(array[],low,first-1);\
   Qsort(array[],first+1,high);\
\}\
}